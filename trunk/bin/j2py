#!/usr/bin/env python
# -*- coding: utf-8 -*-
""" j2py -> Java to Python compiler script.

This is all very ordinary.  We import the package bits, open and read
a file, translate it, and write it out.

"""
import sys
from collections import defaultdict
from logging import _levelNames as logLevels, exception, warning, info, basicConfig
from optparse import Option, OptionParser, OptionValueError
from os import path
from time import time

from java2python.compiler import Module, buildAST, transformAST
from java2python.config import Config
from java2python.lib.colortools import colors


version = '0.5'


def isWindows():
    """ True if running on Windows. """
    return sys.platform.startswith('win')


def badLogLevel(name, value):
    """ Raise an error indicating a bad log level. """
    msg = 'option %s: invalid loglevel: %r'
    raise OptionValueError(msg % (name, value))


def checkLogLevel(option, opt, value):
    """ Option type checker (see LocalOption class) to verify a log level. """
    try:
        lvl = int(value)
    except (ValueError, ):
        name = value.upper()
        if name not in logLevels:
            badLogLevel(opt, value)
        lvl = logLevels[name]
    else:
        if lvl not in logLevels:
            badLogLevel(opt, value)
    return lvl


class LocalOption(Option):
    """ Supplements the Option class with our log level checker. """
    TYPES = Option.TYPES + ('loglevel', )
    TYPE_CHECKER = Option.TYPE_CHECKER.copy()
    TYPE_CHECKER['loglevel'] = checkLogLevel


def profileMain(options):
    """ Runs our main function with profiling if indicated by options. """
    if options.profile:
	import cProfile, pstats
	prof = cProfile.Profile()
	prof.runcall(main, options)
	stats = pstats.Stats(prof, stream=sys.stderr)
	stats.strip_dirs().sort_stats('cumulative')
	stats.print_stats().print_callers()
	return 0
    else:
	return main(options)


def configFromDir(inname, dirname):
    """ Returns a file name from the given config directory. """
    name = path.join(dirname, path.basename(path.splitext(inname)[0]))
    return '%s.py' % path.abspath(name)


def main(options):
    """ Compile the indicated java source with the given options. """
    timed = defaultdict(time)
    timed['overall']

    filein = fileout = filedefault = '-'
    if options.inputfile and not isinstance(options.inputfile, file):
	filein = options.inputfile
    if options.outputfile and not isinstance(options.outputfile, file):
	fileout = path.basename(options.outputfile)
    elif fileout != filedefault:
	fileout = '%s.py' % (path.splitext(filein)[0])

    configs = options.configs
    if options.configdir and not isinstance(filein, file):
	dirconfigname = configFromDir(filein, options.configdir)
	if path.exists(dirconfigname):
	    configs.insert(0, dirconfigname)
    if options.includedefaults:
        configs.insert(0, 'java2python.config.default')

    try:
	if filein != '-':
	    source = open(filein).read()
	else:
	    source = sys.stdin.read()
    except (IOError, ), exc:
        code, msg = exc.args[0:2]
        print 'IOError: %s.' % (msg, )
        return code

    timed['comp']
    try:
	tree = buildAST(source)
    except (Exception, ), exc:
        exception('exception while parsing')
        return 1
    timed['comp_finish']

    config = Config(configs)
    timed['xform']
    transformAST(tree, config)
    timed['xform_finish']

    timed['visit']
    module = Module(config)
    module.sourceFilename = path.abspath(filein) if filein != '-' else None
    module.name = path.splitext(path.basename(filein))[0] if filein != '-' else '<stdin>'
    module.walk(tree)
    timed['visit_finish']

    timed['encode']
    source = unicode(module)
    timed['encode_finish']
    timed['overall_finish']

    if options.lexertokens:
        for idx, tok in enumerate(tree.parser.input.tokens):
            print >> sys.stderr, '{0}  {1}'.format(idx, tok)
	print >> sys.stderr

    if options.javaast:
	tree.dump(sys.stderr)
	print >> sys.stderr

    if options.pytree:
	module.dumpRepr(sys.stderr)
	print >> sys.stderr

    if not options.skipsource:
	if fileout == filedefault:
	    output = sys.stdout
	else:
	    output = open(fileout, 'w')
	module.name = path.splitext(filein)[0] if filein != '-' else '<stdin>'
	print >> output, source

    try:
        compile(source, '<string>', 'exec')
    except (SyntaxError, ), ex:
        warning('Generated source has invalid syntax. %s', ex)
    else:
        info('Generated source has valid syntax.')

    info('Parse:     %.4f seconds', timed['comp_finish'] - timed['comp'])
    info('Visit:     %.4f seconds', timed['visit_finish'] - timed['visit'])
    info('Transform: %.4f seconds', timed['xform_finish'] - timed['xform'])
    info('Encode:    %.4f seconds', timed['encode_finish'] - timed['encode'])
    info('Total:     %.4f seconds', timed['overall_finish'] - timed['overall'])
    return 0


def config(argv):
    """ Return an options object from the given argument sequence. """
    parser = OptionParser(option_class=LocalOption, version='%prog '+version)
    addopt = parser.add_option
    addopt('-i', '--input', dest='inputfile',
	   help='Read from INPUTFILE.  May use - for stdin.',
	   metavar='INPUTFILE', default=None)
    addopt('-o', '--output', dest='outputfile',
	   help='Write to OUTPUTFILE.  May use - for stdout.',
	   metavar='OUTPUTFILE', default=None)
    addopt('-c', '--config', dest='configs',
	   help='Use CONFIG file or module.  May be repeated.',
	   metavar='CONFIG', default=[],
	   action='append')
    addopt('-d', '--configdir', dest='configdir',
	   help='Use DIR to match input filename with config filename.',
	   metavar='DIR', default=None)
    addopt('-n', '--nodefaults', dest='includedefaults',
	   help='Ignore default configuration module.',
	   default=True, action='store_false')
    addopt('-l', '--loglevel', dest='loglevel',
	   help='Set log level by name or value.',
	   default='WARN', type='loglevel')
    addopt('-t', '--lexer-tokens', dest='lexertokens',
	   help='Print lexer tokens to stderr.',
	   default=False, action='store_true')
    addopt('-p', '--python-tree', dest='pytree',
	   help='Print python object tree to stderr.',
	   default=False, action='store_true')
    addopt('-j', '--java-ast', dest='javaast',
	   help='Print java source AST tree to stderr.',
	   default=False, action='store_true')
    addopt('-f', '--profile', dest='profile',
	   help='Profile execution and print results to stderr.',
	   default=False, action='store_true')
    addopt('-s', '--skip-source', dest='skipsource',
	   help='Skip writing translated source; useful when printing trees',
	   default=False, action='store_true')
    addopt('-r', '--nocolor', dest='nocolor',
	   help='Disable color output.' +\
	       ('  No effect on Win OS.' if isWindows() else ''),
	   default=False, action='store_true')

    options, args = parser.parse_args(argv)
    if len(args) > 2:
	parser.error('Only one input file supported.')
    elif len(args) == 2:
	options.inputfile = args[1]
    if options.inputfile == '-':
        options.inputfile = sys.stdin
    if options.outputfile == '-':
        options.outputfile = sys.stdout
    ## these next statements don't belong here, but this is as good a
    ## place as any.
    if isWindows() or options.nocolor:
	colors.clear()
    fmt = '# %(levelname)s %(funcName)s: %(message)s'
    basicConfig(level=options.loglevel, format=fmt)
    return options


if __name__ == '__main__':
    sys.exit(profileMain(config(sys.argv)))
