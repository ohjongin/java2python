#!/usr/bin/env python
# -*- coding: utf-8 -*-
import compiler
import optparse
import os.path
import sys


from java2python.lib.lexer import Lexer
from java2python.lib.parser import Parser
from java2python.lib.walker import Walker
from java2python.lib.sourcetypes import Module, set_config


try:
    import psyco
except (ImportError, ):
    pass
else:
    psyco.full()


def transform(options):
    lexer_args = [options.inputfile, ] if options.inputfile else []
    L = Lexer(*lexer_args)
    P = Parser(L)
    W = Walker()
    
    try:
        P.compilationUnit()
    except (Exception, ), exc:
       print '*** exception while parsing:'
       print exc
       return 1

    ast = P.getAST()
    if not ast:
       print '*** error: no AST generated.'
       return 2

    filein = fileout = filedefault = '-'    
    if options.inputfile:
        filein = os.path.basename(options.inputfile)
    if options.outputfile:
        fileout = os.path.basename(options.outputfile)
    elif fileout != filedefault:
        fileout = '%s.py' % (os.path.splitext(filein)[0])        

    if fileout == filedefault:
        output = sys.stdout
    else:
        output = open(fileout, 'w')

    set_config(options.configs, options.includedefaults)
    M = Module(filein, fileout)
    W.walk(ast, M)
    source = str(M)
    print >> output, source

    if options.syntaxcheck:
        try:
            compiler.parse(source)
        except (SyntaxError, ):
            msg = '## ERR:  invalid syntax in generated source.'
        else:
            msg = '## INFO:  generated source has valid syntax.'
        print >> sys.stderr, msg
    return 0


def cli_options(argv):
    parser = optparse.OptionParser(version='%prog 0.1')
    parser.add_option('-i', '--input', dest='inputfile',
                      help='read INPUTFILE',
                      metavar='INPUTFILE', default=None)
    parser.add_option('-o', '--output', dest='outputfile',
                      help='write OUTPUTFILE',
                      metavar='OUTPUTFILE', default=None)
    parser.add_option('-c', '--config', dest='configs',
                      help='use CONFIG (multiple allowed)',
                      metavar='CONFIG', default=[],
                      action='append')
    parser.add_option('-n', '--nodefaults', dest='includedefaults',
                      help='ignore default configuration',
                      default=True, action='store_false')
    parser.add_option('-s', '--syntaxcheck', dest='syntaxcheck',
                      help='Check source syntax after generation',
                      default=False, action='store_true')
    options, args = parser.parse_args(argv)
    return options, args

if __name__ == '__main__':
    options, args = cli_options(sys.argv)
    ret = transform(options)
    sys.exit(ret)

